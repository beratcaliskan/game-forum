'use client';import { useState, useEffect } from 'react';import { useRouter } from 'next/navigation';import Link from 'next/link';import { useAuth } from '@/lib/AuthContext';import { supabase } from '@/lib/supabase';import {   FaArrowLeft,  FaPlus,  FaEdit,  FaTrash,  FaFolder,  FaTimes,  FaSave,  FaEye} from 'react-icons/fa';type Category = {  id: number;  name: string;  description: string;  created_at: string;  thread_count?: number;};export default function CategoriesManagement() {  const { user, loading: authLoading } = useAuth();  const router = useRouter();  const [loading, setLoading] = useState(true);  const [categories, setCategories] = useState<Category[]>([]);  const [showModal, setShowModal] = useState(false);  const [editingCategory, setEditingCategory] = useState<Category | null>(null);  const [processing, setProcessing] = useState(false);  const [deleteConfirm, setDeleteConfirm] = useState<number | null>(null);  const [formData, setFormData] = useState({    name: '',    description: ''  });  const [formError, setFormError] = useState<string | null>(null);  useEffect(() => {    if (!authLoading) {      if (!user) {        router.push('/auth/login');        return;      }      if (user.role !== 'admin') {        router.push('/admin');        return;      }      fetchCategories();    }  }, [user, authLoading, router]);  const fetchCategories = async () => {    try {      setLoading(true);      const { data: categoriesData, error } = await supabase        .from('categories')        .select('*')        .order('created_at', { ascending: true });      if (error) throw error;      const categoriesWithCount = await Promise.all(        (categoriesData || []).map(async (category) => {          const { count } = await supabase            .from('threads')            .select('*', { count: 'exact', head: true })            .eq('category_id', category.id);          return {            ...category,            thread_count: count || 0          };        })      );      setCategories(categoriesWithCount);    } catch (error: any) {      console.error('Kategoriler alınırken hata:', error);    } finally {      setLoading(false);    }  };  const handleSubmit = async (e: React.FormEvent) => {    e.preventDefault();    setFormError(null);    if (!formData.name.trim()) {      setFormError('Kategori adı gereklidir');      return;    }    if (!formData.description.trim()) {      setFormError('Kategori açıklaması gereklidir');      return;    }    setProcessing(true);    try {      if (editingCategory) {        const { error } = await supabase          .from('categories')          .update({            name: formData.name.trim(),            description: formData.description.trim(),          })          .eq('id', editingCategory.id);        if (error) throw error;      } else {        const { error } = await supabase          .from('categories')          .insert({            name: formData.name.trim(),            description: formData.description.trim(),          });        if (error) throw error;      }      await fetchCategories();      handleCloseModal();    } catch (error: any) {      console.error('Kategori kaydedilirken hata:', error);      if (error.code === '23505') {        setFormError('Bu kategori adı zaten kullanılıyor');      } else {        setFormError('Kategori kaydedilirken bir hata oluştu');      }    } finally {      setProcessing(false);    }  };  const handleEdit = (category: Category) => {    setEditingCategory(category);    setFormData({      name: category.name,      description: category.description    });    setFormError(null);    setShowModal(true);  };  const handleDelete = async (categoryId: number) => {    setProcessing(true);    try {      const { count } = await supabase        .from('threads')        .select('*', { count: 'exact', head: true })        .eq('category_id', categoryId);      if (count && count > 0) {        alert(`Bu kategoride ${count} konu bulunuyor. Önce konuları başka kategoriye taşıyın.`);        return;      }      const { error } = await supabase        .from('categories')        .delete()        .eq('id', categoryId);      if (error) throw error;      await fetchCategories();      setDeleteConfirm(null);    } catch (error: any) {      console.error('Kategori silinirken hata:', error);      alert('Kategori silinirken bir hata oluştu');    } finally {      setProcessing(false);    }  };  const handleCloseModal = () => {    setShowModal(false);    setEditingCategory(null);    setFormData({ name: '', description: '' });    setFormError(null);  };  const formatDate = (dateString: string) => {    const date = new Date(dateString);    return date.toLocaleDateString('tr-TR', {      year: 'numeric',      month: 'short',      day: 'numeric'    });  };  if (authLoading || loading) {    return (      <div className="bg-dark-900 min-h-screen flex items-center justify-center">        <div className="text-center">          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary-500 mx-auto mb-4"></div>          <p className="text-gray-400">Kategoriler yükleniyor...</p>        </div>      </div>    );  }  if (!user || user.role !== 'admin') {    return (      <div className="bg-dark-900 min-h-screen flex items-center justify-center">        <div className="text-center">          <p className="text-red-400 mb-4">Bu sayfaya erişim yetkiniz yok</p>          <Link href="/admin" className="text-primary-400 hover:text-primary-300">            Admin paneline dön          </Link>        </div>      </div>    );  }  return (    <div className="bg-dark-900 min-h-screen">      <div className="max-w-7xl mx-auto px-4 py-8">        <div className="flex items-center justify-between mb-8">          <div className="flex items-center gap-4">            <Link               href="/admin"              className="flex items-center gap-2 text-gray-400 hover:text-primary-400 transition-colors"            >              <FaArrowLeft />              <span>Admin Panel</span>            </Link>            <div className="w-px h-6 bg-gray-600"></div>            <div className="flex items-center gap-2">              <FaFolder className="text-primary-400" />              <h1 className="text-2xl font-bold text-white">Kategori Yönetimi</h1>            </div>          </div>          <button            onClick={() => setShowModal(true)}            className="flex items-center gap-2 bg-primary-600 hover:bg-primary-700 text-white px-4 py-2 rounded-lg transition-colors"          >            <FaPlus />            <span>Kategori Ekle</span>          </button>        </div>        <div className="bg-dark-800 rounded-xl border border-dark-700 overflow-hidden">          <div className="overflow-x-auto">            <table className="w-full">              <thead className="bg-dark-700">                <tr>                  <th className="px-6 py-4 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">                    Kategori                  </th>                  <th className="px-6 py-4 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">                    Açıklama                  </th>                  <th className="px-6 py-4 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">                    Konu Sayısı                  </th>                  <th className="px-6 py-4 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">                    Oluşturulma                  </th>                  <th className="px-6 py-4 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">                    İşlemler                  </th>                </tr>              </thead>              <tbody className="divide-y divide-dark-700">                {categories.map((category) => (                  <tr key={category.id} className="hover:bg-dark-700/50 transition-colors">                    <td className="px-6 py-4">                      <div className="flex items-center gap-3">                        <div className="w-10 h-10 bg-primary-500/20 rounded-lg flex items-center justify-center">                          <FaFolder className="text-primary-400" />                        </div>                        <div>                          <p className="font-medium text-white">{category.name}</p>                        </div>                      </div>                    </td>                    <td className="px-6 py-4">                      <p className="text-gray-300 max-w-md">{category.description}</p>                    </td>                    <td className="px-6 py-4">                      <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-600/50 text-gray-300">                        {category.thread_count} konu                      </span>                    </td>                    <td className="px-6 py-4 text-sm text-gray-400">                      {formatDate(category.created_at)}                    </td>                    <td className="px-6 py-4">                      <div className="flex items-center gap-2">                        <button                          onClick={() => handleEdit(category)}                          className="text-blue-400 hover:text-blue-300 transition-colors"                          title="Düzenle"                        >                          <FaEdit />                        </button>                        {category.thread_count === 0 && (                          <button                            onClick={() => setDeleteConfirm(category.id)}                            className="text-red-400 hover:text-red-300 transition-colors"                            title="Sil"                          >                            <FaTrash />                          </button>                        )}                        <Link                          href={`/forum?selectedCategory=${category.id}`}                          className="text-gray-400 hover:text-gray-300 transition-colors"                          title="Konuları Görüntüle"                        >                          <FaEye />                        </Link>                      </div>                    </td>                  </tr>                ))}              </tbody>            </table>          </div>          {categories.length === 0 && (            <div className="text-center py-12">              <FaFolder className="mx-auto text-gray-600 text-4xl mb-4" />              <p className="text-gray-400">Henüz kategori bulunmuyor</p>              <button                onClick={() => setShowModal(true)}                className="mt-4 text-primary-400 hover:text-primary-300"              >                İlk kategoriyi ekle              </button>            </div>          )}        </div>      </div>      {showModal && (        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">          <div className="bg-dark-800 rounded-xl p-6 border border-dark-700 max-w-md w-full mx-4">            <h3 className="text-xl font-bold text-white mb-4">              {editingCategory ? 'Kategori Düzenle' : 'Yeni Kategori Ekle'}            </h3>            <form onSubmit={handleSubmit} className="space-y-4">              {formError && (                <div className="bg-red-500/20 border border-red-500 text-red-300 px-4 py-3 rounded-lg">                  {formError}                </div>              )}              <div>                <label className="block text-sm font-medium text-gray-300 mb-2">                  Kategori Adı                </label>                <input                  type="text"                  value={formData.name}                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}                  className="w-full px-4 py-2 bg-dark-700 border border-dark-600 rounded-lg text-white focus:border-primary-500 focus:outline-none"                  placeholder="Kategori adı..."                  required                />              </div>              <div>                <label className="block text-sm font-medium text-gray-300 mb-2">                  Açıklama                </label>                <textarea                  value={formData.description}                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}                  className="w-full px-4 py-2 bg-dark-700 border border-dark-600 rounded-lg text-white focus:border-primary-500 focus:outline-none"                  placeholder="Kategori açıklaması..."                  rows={3}                  required                />              </div>              <div className="flex gap-3 pt-4">                <button                  type="button"                  onClick={handleCloseModal}                  disabled={processing}                  className="flex-1 px-4 py-2 bg-gray-600 hover:bg-gray-500 text-white rounded-lg transition-colors disabled:opacity-50"                >                  İptal                </button>                <button                  type="submit"                  disabled={processing}                  className="flex-1 px-4 py-2 bg-primary-600 hover:bg-primary-700 text-white rounded-lg transition-colors disabled:opacity-50 flex items-center justify-center gap-2"                >                  {processing ? (                    <div className="animate-spin rounded-full h-4 w-4 border-t-2 border-b-2 border-white"></div>                  ) : (                    <>                      <FaSave />                      <span>{editingCategory ? 'Güncelle' : 'Ekle'}</span>                    </>                  )}                </button>              </div>            </form>          </div>        </div>      )}      {deleteConfirm && (        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">          <div className="bg-dark-800 rounded-xl p-6 border border-dark-700 max-w-md w-full mx-4">            <h3 className="text-xl font-bold text-white mb-4">Kategoriyi Sil</h3>            <p className="text-gray-400 mb-6">              Bu kategoriyi silmek istediğinizden emin misiniz? Bu işlem geri alınamaz.            </p>            <div className="flex gap-3">              <button                onClick={() => setDeleteConfirm(null)}                disabled={processing}                className="flex-1 px-4 py-2 bg-gray-600 hover:bg-gray-500 text-white rounded-lg transition-colors disabled:opacity-50"              >                İptal              </button>              <button                onClick={() => handleDelete(deleteConfirm)}                disabled={processing}                className="flex-1 px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors disabled:opacity-50"              >                {processing ? 'Siliniyor...' : 'Sil'}              </button>            </div>          </div>        </div>      )}    </div>  );} 