'use client';import { useState, useEffect } from 'react';import { useRouter } from 'next/navigation';import Link from 'next/link';import Image from 'next/image';import { useAuth } from '@/lib/AuthContext';import { supabase } from '@/lib/supabase';import ReportActionModal from '../../../components/ReportActionModal';import {   FaArrowLeft,  FaFlag,  FaEye,  FaCheck,  FaTimes,  FaExclamationTriangle,  FaFilter,  FaSearch,  FaTrash,  FaExternalLinkAlt,  FaComments,  FaUsers,  FaCog} from 'react-icons/fa';const DEFAULT_AVATAR_URL = 'https://ui-avatars.com/api/?name=';type Report = {  id: number;  report_type: 'thread' | 'post' | 'user';  reason: string;  description?: string;  status: 'pending' | 'resolved' | 'dismissed' | string;  created_at: string;  reviewed_at?: string;  reviewed_by?: number;  moderator_notes?: string;  reporter_id?: number;  reported_user_id?: number;  thread_id?: number;  post_id?: number;  reporter: {    id: number;    username: string;    avatar_url?: string;  };  reported_user?: {    id: number;    username: string;    avatar_url?: string;  };  reported_thread?: {    id: number;    title: string;    author: string;  };  reported_post?: {    id: number;    content: string;    author: string;  };  threads?: any;  posts?: any;};export default function ReportsManagement() {  const { user, loading: authLoading } = useAuth();  const router = useRouter();  const [loading, setLoading] = useState(true);  const [reports, setReports] = useState<Report[]>([]);  const [filteredReports, setFilteredReports] = useState<Report[]>([]);  const [searchTerm, setSearchTerm] = useState('');  const [statusFilter, setStatusFilter] = useState<string>('all');  const [typeFilter, setTypeFilter] = useState<string>('all');  const [selectedReport, setSelectedReport] = useState<Report | null>(null);  const [showDetailModal, setShowDetailModal] = useState(false);  const [processing, setProcessing] = useState(false);  const [showActionModal, setShowActionModal] = useState(false);  const [currentAction, setCurrentAction] = useState<'resolve' | 'dismiss'>('resolve');  const [reportToAction, setReportToAction] = useState<Report | null>(null);  useEffect(() => {    if (!authLoading) {      if (!user) {        router.push('/auth/login');        return;      }      if (user.role !== 'admin' && user.role !== 'moderator') {        router.push('/admin');        return;      }      fetchReports();    }  }, [user, authLoading, router]);  useEffect(() => {    let filtered = [...reports];    if (searchTerm) {      filtered = filtered.filter(report =>         report.reason.toLowerCase().includes(searchTerm.toLowerCase()) ||        report.reporter.username.toLowerCase().includes(searchTerm.toLowerCase()) ||        report.reported_thread?.title?.toLowerCase().includes(searchTerm.toLowerCase()) ||        report.reported_post?.content?.toLowerCase().includes(searchTerm.toLowerCase()) ||        report.reported_user?.username?.toLowerCase().includes(searchTerm.toLowerCase())      );    }    if (statusFilter !== 'all') {      filtered = filtered.filter(report => report.status === statusFilter);    }    if (typeFilter !== 'all') {      filtered = filtered.filter(report => report.report_type === typeFilter);    }    filtered.sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime());    setFilteredReports(filtered);  }, [reports, searchTerm, statusFilter, typeFilter]);  const fetchReports = async () => {    try {      setLoading(true);      console.log('Fetching reports...');      const { data: reportsData, error } = await supabase        .from('reports')        .select(`          id,          report_type,          reason,          description,          status,          created_at,          reviewed_at,          reviewed_by,          moderator_notes,          reporter_id,          reported_user_id,          thread_id,          post_id        `)        .order('created_at', { ascending: false });      if (error) {        console.error('Reports query error:', error);        throw error;      }      if (!reportsData || reportsData.length === 0) {        console.log('No reports found');        setReports([]);        return;      }      const reportsWithRelatedData = await Promise.all(        reportsData.map(async (report) => {          const [reporterResult, reportedUserResult, threadResult, postResult] = await Promise.all([            supabase              .from('profiles')              .select('username, avatar_url')              .eq('user_id', report.reporter_id)              .single(),            report.reported_user_id ?               supabase                .from('profiles')                .select('username, avatar_url')                .eq('user_id', report.reported_user_id)                .single() :               Promise.resolve({ data: null, error: null }),            report.thread_id ?               supabase                .from('threads')                .select(`                  id,                  title,                  author_id,                  profiles!threads_author_id_fkey (                    username                  )                `)                .eq('id', report.thread_id)                .single() :               Promise.resolve({ data: null, error: null }),            report.post_id ?               supabase                .from('posts')                .select(`                  id,                  content,                  user_id,                  profiles!posts_user_id_fkey (                    username                  )                `)                .eq('id', report.post_id)                .single() :               Promise.resolve({ data: null, error: null })          ]);          return {            ...report,            reporter: reporterResult.data,            reported_user: reportedUserResult.data,            threads: threadResult.data,            posts: postResult.data          };        })      );      console.log('Reports data:', reportsData);      console.log('Reports error:', error);      if (error) throw error;      const transformedReports: Report[] = reportsWithRelatedData.map((report) => {        console.log('Processing report:', report.id, report.report_type);        console.log('Thread data:', report.threads);        console.log('Post data:', report.posts);        console.log('Thread ID:', report.thread_id);        console.log('Post ID:', report.post_id);        const transformedReport: Report = {          id: report.id,          report_type: report.report_type,          reason: report.reason,          description: report.description,          status: report.status,          created_at: report.created_at,          reviewed_at: report.reviewed_at,          reviewed_by: report.reviewed_by,          moderator_notes: report.moderator_notes,          reporter_id: report.reporter_id,          reported_user_id: report.reported_user_id,          thread_id: report.thread_id,          post_id: report.post_id,          reporter: {            id: report.reporter_id,            username: report.reporter?.username || 'Deleted User',            avatar_url: report.reporter?.avatar_url          },          threads: report.threads,          posts: report.posts        };        transformedReport.reported_user = {          id: report.reported_user_id,          username: report.reported_user?.username || 'Deleted User',          avatar_url: report.reported_user?.avatar_url        };        if (report.thread_id && report.threads) {          console.log('Adding reported thread for report', report.id);          transformedReport.reported_thread = {            id: report.thread_id,            title: report.threads.title || 'Deleted Thread',            author: (report.threads.profiles as any)?.username || 'Deleted User'          };        } else {          console.log('No thread data for report', report.id, 'thread_id:', report.thread_id, 'threads:', report.threads);        }        if (report.post_id && report.posts) {          console.log('Adding reported post for report', report.id);          transformedReport.reported_post = {            id: report.post_id,            content: report.posts.content || 'Deleted Post',            author: (report.posts.profiles as any)?.username || 'Deleted User'          };        } else {          console.log('No post data for report', report.id, 'post_id:', report.post_id, 'posts:', report.posts);        }        console.log('Final transformed report:', transformedReport);        return transformedReport;      });      console.log('Transformed reports:', transformedReports);      setReports(transformedReports);    } catch (error) {      console.error('Raporlar alınırken hata:', error);    } finally {      setLoading(false);    }  };  const handleActionClick = (report: Report, action: 'resolve' | 'dismiss') => {    setReportToAction(report);    setCurrentAction(action);    setShowActionModal(true);  };  const handleReportActionWithNotes = async (moderatorNotes: string) => {    if (!user || !reportToAction) return;    try {      setProcessing(true);      const updateData = {        status: currentAction === 'resolve' ? 'resolved' : 'dismissed',        reviewed_at: new Date().toISOString(),        reviewed_by: user.id,        moderator_notes: moderatorNotes || null      };      const { error } = await supabase        .from('reports')        .update(updateData)        .eq('id', reportToAction.id);      if (error) throw error;      setReports(reports.map(report =>         report.id === reportToAction.id           ? { ...report, ...updateData } as Report          : report      ));      setShowActionModal(false);      setReportToAction(null);    } catch (error) {      console.error('Rapor işleme hatası:', error);      alert('Rapor işleme sırasında bir hata oluştu!');    } finally {      setProcessing(false);    }  };  const handleReportAction = async (reportId: number, action: 'dismiss' | 'pending') => {    if (!user) return;    try {      setProcessing(true);      let newStatus: string;      let updateData: any = { status: action };      if (action === 'dismiss') {        newStatus = 'dismissed';        updateData = {          status: 'dismissed',          reviewed_at: new Date().toISOString(),          reviewed_by: user.id        };      } else if (action === 'pending') {        newStatus = 'pending';        updateData = {          status: 'pending',          reviewed_at: null,          reviewed_by: null,          moderator_notes: null        };      }      const { error } = await supabase        .from('reports')        .update(updateData)        .eq('id', reportId);      if (error) throw error;      setReports(reports.map(report =>         report.id === reportId           ? {               ...report,              ...updateData            }          : report      ));      setShowDetailModal(false);      setSelectedReport(null);    } catch (error) {      console.error('Rapor işlenirken hata:', error);      alert('Rapor işlenirken hata oluştu');    } finally {      setProcessing(false);    }  };  const getStatusColor = (status: string) => {    switch (status) {      case 'pending': return 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30';      case 'resolved': return 'bg-green-500/20 text-green-400 border-green-500/30';      case 'dismissed': return 'bg-gray-500/20 text-gray-400 border-gray-500/30';      default: return 'bg-gray-500/20 text-gray-400 border-gray-500/30';    }  };  const getStatusText = (status: string) => {    switch (status) {      case 'pending': return 'Bekliyor';      case 'resolved': return 'Çözüldü';      case 'dismissed': return 'Reddedildi';      default: return 'Bilinmiyor';    }  };  const getTypeColor = (report_type: string) => {    switch (report_type) {      case 'thread': return 'bg-blue-500/20 text-blue-400';      case 'post': return 'bg-purple-500/20 text-purple-400';      case 'user': return 'bg-orange-500/20 text-orange-400';      default: return 'bg-gray-500/20 text-gray-400';    }  };  const getTypeText = (report_type: string) => {    switch (report_type) {      case 'thread': return 'Konu';      case 'post': return 'Gönderi';      case 'user': return 'Kullanıcı';      default: return 'Bilinmiyor';    }  };  const formatDate = (dateString: string) => {    const date = new Date(dateString);    const now = new Date();    const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));    if (diffInMinutes < 60) {      return `${diffInMinutes} dakika önce`;    } else if (diffInMinutes < 1440) {      const hours = Math.floor(diffInMinutes / 60);      return `${hours} saat önce`;    } else {      const days = Math.floor(diffInMinutes / 1440);      return `${days} gün önce`;    }  };  if (authLoading || loading) {    return (      <div className="bg-dark-900 min-h-screen flex items-center justify-center">        <div className="text-center">          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary-500 mx-auto mb-4"></div>          <p className="text-gray-400">Raporlar yükleniyor...</p>        </div>      </div>    );  }  if (!user || (user.role !== 'admin' && user.role !== 'moderator')) {    return (      <div className="bg-dark-900 min-h-screen flex items-center justify-center">        <div className="text-center">          <p className="text-red-400 mb-4">Bu sayfaya erişim yetkiniz yok</p>          <Link href="/admin" className="text-primary-400 hover:text-primary-300">            Admin paneline dön          </Link>        </div>      </div>    );  }  return (    <div className="bg-dark-900 min-h-screen">      <div className="max-w-7xl mx-auto px-4 py-8">        <div className="flex items-center justify-between mb-8">          <div className="flex items-center gap-4">            <Link               href="/admin"              className="flex items-center gap-2 text-gray-400 hover:text-primary-400 transition-colors"            >              <FaArrowLeft />              <span>Admin Panel</span>            </Link>            <div className="w-px h-6 bg-gray-600"></div>            <div className="flex items-center gap-2">              <FaFlag className="text-red-400" />              <h1 className="text-2xl font-bold text-white">Rapor Yönetimi</h1>            </div>          </div>          <div className="text-sm text-gray-400">            {filteredReports.length} / {reports.length} rapor          </div>        </div>        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">          <div className="bg-dark-800 rounded-xl p-4 border border-dark-700">            <div className="flex items-center justify-between">              <div>                <p className="text-sm text-gray-400">Bekleyen</p>                <p className="text-2xl font-bold text-yellow-400">                  {reports.filter(r => r.status === 'pending').length}                </p>              </div>              <FaExclamationTriangle className="text-yellow-400 text-xl" />            </div>          </div>          <div className="bg-dark-800 rounded-xl p-4 border border-dark-700">            <div className="flex items-center justify-between">              <div>                <p className="text-sm text-gray-400">Çözüldü</p>                <p className="text-2xl font-bold text-green-400">                  {reports.filter(r => r.status === 'resolved').length}                </p>              </div>              <FaCheck className="text-green-400 text-xl" />            </div>          </div>          <div className="bg-dark-800 rounded-xl p-4 border border-dark-700">            <div className="flex items-center justify-between">              <div>                <p className="text-sm text-gray-400">Reddedildi</p>                <p className="text-2xl font-bold text-gray-400">                  {reports.filter(r => r.status === 'dismissed').length}                </p>              </div>              <FaTimes className="text-gray-400 text-xl" />            </div>          </div>          <div className="bg-dark-800 rounded-xl p-4 border border-dark-700">            <div className="flex items-center justify-between">              <div>                <p className="text-sm text-gray-400">Toplam</p>                <p className="text-2xl font-bold text-white">{reports.length}</p>              </div>              <FaFlag className="text-primary-400 text-xl" />            </div>          </div>        </div>        <div className="bg-dark-800 rounded-xl p-6 border border-dark-700 mb-6">          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">            <div className="relative">              <FaSearch className="absolute left-3 top-3 text-gray-400" />              <input                type="text"                placeholder="Rapor ara..."                value={searchTerm}                onChange={(e) => setSearchTerm(e.target.value)}                className="w-full bg-dark-900 border border-dark-600 rounded-lg pl-10 pr-4 py-2 text-white placeholder-gray-400 focus:border-primary-500 focus:outline-none"              />            </div>            <select              value={statusFilter}              onChange={(e) => setStatusFilter(e.target.value)}              className="bg-dark-900 border border-dark-600 rounded-lg px-4 py-2 text-white focus:border-primary-500 focus:outline-none"            >              <option value="all">Tüm Durumlar</option>              <option value="pending">Bekliyor</option>              <option value="resolved">Çözüldü</option>              <option value="dismissed">Reddedildi</option>            </select>            <select              value={typeFilter}              onChange={(e) => setTypeFilter(e.target.value)}              className="bg-dark-900 border border-dark-600 rounded-lg px-4 py-2 text-white focus:border-primary-500 focus:outline-none"            >              <option value="all">Tüm Tipler</option>              <option value="thread">Konu</option>              <option value="post">Gönderi</option>              <option value="user">Kullanıcı</option>            </select>          </div>        </div>        <div className="space-y-4">          {filteredReports.map((report) => (            <div key={report.id} className="bg-dark-800 rounded-xl p-6 border border-dark-700">              <div className="flex items-start justify-between">                <div className="flex-1">                  <div className="flex items-center gap-3 mb-3">                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getTypeColor(report.report_type)}`}>                      {getTypeText(report.report_type)}                    </span>                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium border ${getStatusColor(report.status)}`}>                      {getStatusText(report.status)}                    </span>                    <span className="text-xs text-gray-400">{formatDate(report.created_at)}</span>                  </div>                  <h3 className="text-lg font-semibold text-white mb-2">{report.reason}</h3>                  <div className="flex items-center gap-2 text-sm text-gray-400 mb-3">                    <span>Rapor eden:</span>                    <div className="flex items-center gap-2">                      <div className="w-6 h-6 rounded-full overflow-hidden">                        <Image                          src={report.reporter.avatar_url || `${DEFAULT_AVATAR_URL}${encodeURIComponent(report.reporter.username)}`}                          alt={report.reporter.username}                          width={24}                          height={24}                          className="object-cover w-full h-full"                        />                      </div>                      <Link                         href={`/profile/${report.reporter.username}`}                        className="text-white hover:text-blue-400 transition-colors no-underline"                        target="_blank"                      >                        {report.reporter.username}                      </Link>                    </div>                  </div>                  {report.reported_thread && (                    <div className="bg-dark-700 rounded-lg p-3 mb-3">                      <p className="text-sm text-gray-400 mb-1">Rapor edilen konu:</p>                      <p className="font-medium text-white mb-1">{report.reported_thread.title}</p>                      <p className="text-xs text-gray-400 mt-1">Yazar: {report.reported_thread.author}</p>                    </div>                  )}                  {report.reported_post && (                    <div className="bg-dark-700 rounded-lg p-3 mb-3">                      <p className="text-sm text-gray-400 mb-1">Rapor edilen gönderi:</p>                      <p className="text-sm text-gray-300 line-clamp-2">{report.reported_post.content}</p>                      <p className="text-xs text-gray-400 mt-1">Yazar: {report.reported_post.author}</p>                    </div>                  )}                  {report.reported_user && (                    <div className="bg-dark-700 rounded-lg p-3 mb-3">                      <p className="text-sm text-gray-400 mb-1">Rapor edilen kullanıcı:</p>                      <div className="flex items-center gap-2">                        <div className="w-6 h-6 rounded-full overflow-hidden">                          <Image                            src={report.reported_user.avatar_url || `${DEFAULT_AVATAR_URL}${encodeURIComponent(report.reported_user.username)}`}                            alt={report.reported_user.username}                            width={24}                            height={24}                            className="object-cover w-full h-full"                          />                        </div>                        <Link                           href={`/profile/${report.reported_user.username}`}                          className="text-white hover:text-blue-400 transition-colors no-underline"                          target="_blank"                        >                          {report.reported_user.username}                        </Link>                      </div>                    </div>                  )}                  {report.description && (                    <p className="text-sm text-gray-300">{report.description}</p>                  )}                </div>                <div className="flex items-center gap-2 ml-4">                  <button                    onClick={() => {                      setSelectedReport(report);                      setShowDetailModal(true);                    }}                    className="text-blue-400 hover:text-blue-300 transition-colors"                    title="Detayları Görüntüle"                  >                    <FaEye />                  </button>                  <div className="flex items-center gap-2">                    {report.report_type === 'thread' && (                      <Link                        href={`/forum/thread/${report.thread_id || report.threads?.id}`}                        className="text-purple-400 hover:text-purple-300 transition-colors p-1 rounded hover:bg-purple-400/10"                        title={`Thread: ${report.threads?.title || 'Rapor Edilen Konuya Git'}`}                        target="_blank"                      >                        <FaExternalLinkAlt size={16} />                      </Link>                    )}                    {report.report_type === 'post' && report.post_id && (                      <button                        onClick={async () => {                          try {                            console.log(`🔍 Post ID ${report.post_id} için veri çekiliyor...`);                            const { data: postData, error: postError } = await supabase                              .from('posts')                              .select(`                                id,                                content,                                thread_id,                                author_id,                                created_at                              `)                              .eq('id', report.post_id)                              .single();                            if (postError) {                              console.error('Post çekme hatası:', postError);                              alert(`Post bilgisi alınamadı: ${postError.message}`);                              return;                            }                            if (!postData) {                              alert('Post bulunamadı (silinmiş olabilir)');                              return;                            }                            console.log('📄 Post verisi:', postData);                            const { data: authorData } = await supabase                              .from('profiles')                              .select('username, avatar_url')                              .eq('user_id', postData.author_id)                              .single();                            const { data: threadData } = await supabase                              .from('threads')                              .select('id, title')                              .eq('id', postData.thread_id)                              .single();                            console.log('👤 Yazar verisi:', authorData);                            console.log('🧵 Thread verisi:', threadData);                            const { data: allPosts, error: postsError } = await supabase                              .from('posts')                              .select('id')                              .eq('thread_id', postData.thread_id)                              .order('created_at', { ascending: true });                            if (postsError) {                              console.error('Posts sırası alınamadı:', postsError);                              alert(`Posts sırası alınamadı: ${postsError.message}`);                              return;                            }                            const postIndex = allPosts?.findIndex(p => p.id === postData.id);                            if (postIndex === -1 || postIndex === undefined) {                              alert('Post sırası bulunamadı');                              return;                            }                            const commentNumber = postIndex + 1;                            console.log(`📍 Post ID ${postData.id} thread'de ${commentNumber}. sırada`);                            if (postData.thread_id) {                              const postUrl = `/forum/thread/${postData.thread_id}#${commentNumber}`;                              console.log(`🔗 Post URL'ye gidiliyor: ${postUrl}`);                              window.open(postUrl, '_blank');                            } else {                              alert('Thread ID bulunamadı, post açılamıyor');                            }                          } catch (error) {                            console.error('Post bilgileri alınırken hata:', error);                            alert(`Bir hata oluştu: ${error}`);                          }                        }}                        className="text-orange-400 hover:text-orange-300 transition-colors p-1 rounded hover:bg-orange-400/10"                        title={`Post ID: ${report.post_id} - Detayları Görüntüle`}                      >                        <FaComments size={16} />                      </button>                    )}                    {report.report_type === 'user' && (report.reported_user || report.reported_user_id) && (                      <Link                        href={`/profile/${report.reported_user?.username || `user-${report.reported_user_id}`}`}                        className="text-yellow-400 hover:text-yellow-300 transition-colors p-1 rounded hover:bg-yellow-400/10"                        title={`Kullanıcı: ${report.reported_user?.username || 'Rapor Edilen Kullanıcı'}`}                        target="_blank"                      >                        <FaUsers size={16} />                      </Link>                    )}                  </div>                  {report.status === 'pending' && (                    <>                      <button                        onClick={() => handleActionClick(report, 'resolve')}                        disabled={processing}                        className="text-green-400 hover:text-green-300 transition-colors disabled:opacity-50"                        title="Çöz"                      >                        <FaCheck />                      </button>                      <button                        onClick={() => handleActionClick(report, 'dismiss')}                        disabled={processing}                        className="text-red-400 hover:text-red-300 transition-colors disabled:opacity-50"                        title="Reddet"                      >                        <FaTimes />                      </button>                    </>                  )}                  {report.status !== 'pending' && (                    <div className="relative group">                      <button                        className="text-gray-400 hover:text-primary-400 transition-colors"                        title="Status Değiştir"                      >                        <FaCog />                      </button>                      <div className="absolute right-0 mt-2 w-40 bg-dark-700 border border-dark-600 rounded-lg shadow-lg overflow-hidden invisible group-hover:visible opacity-0 group-hover:opacity-100 transition-all duration-300 z-10">                        <button                          onClick={() => handleActionClick(report, 'resolve')}                          disabled={processing || report.status === 'resolved'}                          className="w-full text-left px-3 py-2 text-sm text-white hover:bg-green-600 disabled:opacity-50 disabled:cursor-not-allowed"                        >                          ✓ Çözüldü                        </button>                        <button                          onClick={() => handleActionClick(report, 'dismiss')}                          disabled={processing || report.status === 'dismissed'}                          className="w-full text-left px-3 py-2 text-sm text-white hover:bg-red-600 disabled:opacity-50 disabled:cursor-not-allowed"                        >                          ✗ Reddedildi                        </button>                        <button                          onClick={() => {                            handleReportAction(report.id, 'pending');                          }}                          disabled={processing || report.status === 'pending'}                          className="w-full text-left px-3 py-2 text-sm text-white hover:bg-yellow-600 disabled:opacity-50 disabled:cursor-not-allowed"                        >                          ⏳ Bekliyor                        </button>                      </div>                    </div>                  )}                </div>              </div>            </div>          ))}        </div>        {filteredReports.length === 0 && (          <div className="text-center py-12">            <FaFlag className="mx-auto text-gray-600 text-4xl mb-4" />            <p className="text-gray-400">Rapor bulunamadı</p>          </div>        )}      </div>      {showDetailModal && selectedReport && (        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">          <div className="bg-dark-800 rounded-xl border border-dark-700 max-w-2xl w-full max-h-[90vh] overflow-y-auto">            <div className="p-6">              <div className="flex items-center justify-between mb-6">                <h3 className="text-xl font-bold text-white">Rapor Detayları</h3>                <button                  onClick={() => {                    setShowDetailModal(false);                    setSelectedReport(null);                  }}                  className="text-gray-400 hover:text-white transition-colors"                >                  <FaTimes />                </button>              </div>              <div className="space-y-4">                <div className="flex items-center gap-3">                  <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${getTypeColor(selectedReport.report_type)}`}>                    {getTypeText(selectedReport.report_type)}                  </span>                  <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium border ${getStatusColor(selectedReport.status)}`}>                    {getStatusText(selectedReport.status)}                  </span>                </div>                <div>                  <p className="text-sm text-gray-400 mb-1">Rapor Nedeni</p>                  <p className="text-white font-medium">{selectedReport.reason}</p>                </div>                {selectedReport.description && (                  <div>                    <p className="text-sm text-gray-400 mb-1">Açıklama</p>                    <p className="text-gray-300">{selectedReport.description}</p>                  </div>                )}                <div>                  <p className="text-sm text-gray-400 mb-1">Rapor Eden</p>                  <div className="flex items-center gap-2">                    <div className="w-8 h-8 rounded-full overflow-hidden">                      <Image                        src={selectedReport.reporter.avatar_url || `${DEFAULT_AVATAR_URL}${encodeURIComponent(selectedReport.reporter.username)}`}                        alt={selectedReport.reporter.username}                        width={32}                        height={32}                        className="object-cover w-full h-full"                      />                    </div>                    <Link                       href={`/profile/${selectedReport.reporter.username}`}                      className="text-white hover:text-blue-400 transition-colors no-underline"                      target="_blank"                    >                      {selectedReport.reporter.username}                    </Link>                  </div>                </div>                <div>                  <p className="text-sm text-gray-400 mb-1">Rapor Tarihi</p>                  <p className="text-gray-300">{formatDate(selectedReport.created_at)}</p>                </div>                {selectedReport.status === 'pending' && (                  <div className="flex gap-3 pt-4 border-t border-dark-700">                    <button                      onClick={() => handleActionClick(selectedReport, 'resolve')}                      disabled={processing}                      className="flex-1 px-4 py-2 bg-green-600 hover:bg-green-500 text-white rounded-lg transition-colors disabled:opacity-50"                    >                      {processing ? 'İşleniyor...' : 'Çöz'}                    </button>                    <button                      onClick={() => handleActionClick(selectedReport, 'dismiss')}                      disabled={processing}                      className="flex-1 px-4 py-2 bg-red-600 hover:bg-red-500 text-white rounded-lg transition-colors disabled:opacity-50"                    >                      {processing ? 'İşleniyor...' : 'Reddet'}                    </button>                  </div>                )}              </div>            </div>          </div>        </div>      )}      {showActionModal && reportToAction && (        <ReportActionModal          isOpen={showActionModal}          onClose={() => {            setShowActionModal(false);            setReportToAction(null);          }}          onSubmit={handleReportActionWithNotes}          reportData={{            id: reportToAction.id,            reason: reportToAction.reason,            reporter: reportToAction.reporter.username,            type: reportToAction.report_type          }}          action={currentAction}          loading={processing}        />      )}    </div>  );} 