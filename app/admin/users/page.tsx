'use client';import { useState, useEffect } from 'react';import { useRouter } from 'next/navigation';import Link from 'next/link';import Image from 'next/image';import { useAuth } from '@/lib/AuthContext';import { supabase } from '@/lib/supabase';import {   FaArrowLeft,  FaSearch,  FaUserShield,  FaUserTimes,  FaUsers,  FaEye,  FaBan,  FaUnlock,  FaChevronDown,  FaFilter,  FaSort} from 'react-icons/fa';const DEFAULT_AVATAR_URL = 'https://ui-avatars.com/api/?name=';type User = {  id: number;  username: string;  email: string;  role: 'admin' | 'moderator' | 'user';  created_at: string;  avatar_url?: string;  is_banned: boolean;  last_login?: string;  total_posts: number;  total_threads: number;};export default function UsersManagement() {  const { user, loading: authLoading } = useAuth();  const router = useRouter();  const [loading, setLoading] = useState(true);  const [users, setUsers] = useState<User[]>([]);  const [filteredUsers, setFilteredUsers] = useState<User[]>([]);  const [searchTerm, setSearchTerm] = useState('');  const [roleFilter, setRoleFilter] = useState<string>('all');  const [statusFilter, setStatusFilter] = useState<string>('all');  const [sortBy, setSortBy] = useState<string>('newest');  const [selectedUser, setSelectedUser] = useState<User | null>(null);  const [showRoleModal, setShowRoleModal] = useState(false);  const [showBanModal, setShowBanModal] = useState(false);  const [processing, setProcessing] = useState(false);  useEffect(() => {    if (!authLoading) {      if (!user) {        router.push('/auth/login');        return;      }      if (user.role !== 'admin' && user.role !== 'moderator') {        router.push('/admin');        return;      }      fetchUsers();    }  }, [user, authLoading, router]);  useEffect(() => {    let filtered = [...users];    if (searchTerm) {      filtered = filtered.filter(u =>         u.username.toLowerCase().includes(searchTerm.toLowerCase()) ||        u.email.toLowerCase().includes(searchTerm.toLowerCase())      );    }    if (roleFilter !== 'all') {      filtered = filtered.filter(u => u.role === roleFilter);    }    if (statusFilter === 'banned') {      filtered = filtered.filter(u => u.is_banned);    } else if (statusFilter === 'active') {      filtered = filtered.filter(u => !u.is_banned);    }    switch (sortBy) {      case 'newest':        filtered.sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime());        break;      case 'oldest':        filtered.sort((a, b) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime());        break;      case 'username':        filtered.sort((a, b) => a.username.localeCompare(b.username));        break;      case 'posts':        filtered.sort((a, b) => b.total_posts - a.total_posts);        break;    }    setFilteredUsers(filtered);  }, [users, searchTerm, roleFilter, statusFilter, sortBy]);  const fetchUsers = async () => {    try {      setLoading(true);      console.log('Fetching users from profiles table...');      const { data: profileCount, error: countError } = await supabase        .from('profiles')        .select('*', { count: 'exact', head: true });      console.log('Profiles table count:', profileCount, 'Error:', countError);      const { data: usersCount, error: usersCountError } = await supabase        .from('users')        .select('*', { count: 'exact', head: true });      console.log('Users table count:', usersCount, 'Error:', usersCountError);      const { data: profilesData, error } = await supabase        .from('profiles')        .select(`          user_id,          username,          avatar_url,          role,          is_banned,          created_at        `)        .order('created_at', { ascending: false });      console.log('Profiles query result:', { profilesData, error });      if (error) {        console.error('Error fetching profiles:', error);        throw error;      }      if (!profilesData || profilesData.length === 0) {        console.log('No profiles found in database');        setUsers([]);        return;      }      console.log(`Found ${profilesData.length} profiles`);      const usersWithEmails = await Promise.all(        profilesData.map(async (profile) => {          console.log('Processing profile:', profile);          const [userResult, postsResult, threadsResult] = await Promise.all([            supabase              .from('users')              .select('email')              .eq('id', profile.user_id)              .single(),            supabase              .from('posts')              .select('id', { count: 'exact' })              .eq('user_id', profile.user_id),            supabase              .from('threads')              .select('id', { count: 'exact' })              .eq('author_id', profile.user_id)          ]);          console.log('User result:', userResult);          console.log('Posts result:', postsResult);          console.log('Threads result:', threadsResult);          return {            id: profile.user_id,            username: profile.username || 'Unknown',            email: userResult.data?.email || 'N/A',            role: profile.role || 'user',            created_at: profile.created_at,            avatar_url: profile.avatar_url,            is_banned: profile.is_banned || false,            total_posts: postsResult.count || 0,            total_threads: threadsResult.count || 0,          } as User;        })      );      console.log('Final users array:', usersWithEmails);      setUsers(usersWithEmails);    } catch (error) {      console.error('Kullanıcılar alınırken hata:', error);    } finally {      setLoading(false);    }  };  const handleRoleChange = async (newRole: 'admin' | 'moderator' | 'user') => {    if (!selectedUser || processing) return;    try {      setProcessing(true);      const { error } = await supabase        .from('profiles')        .update({ role: newRole })        .eq('user_id', selectedUser.id);      if (error) throw error;      setUsers(users.map(u =>         u.id === selectedUser.id ? { ...u, role: newRole } : u      ));      setShowRoleModal(false);      setSelectedUser(null);    } catch (error) {      console.error('Rol güncellenirken hata:', error);      alert('Rol güncellenirken hata oluştu');    } finally {      setProcessing(false);    }  };  const handleBanToggle = async () => {    if (!selectedUser || processing) return;    try {      setProcessing(true);      const newBanStatus = !selectedUser.is_banned;      const { error } = await supabase        .from('profiles')        .update({ is_banned: newBanStatus })        .eq('user_id', selectedUser.id);      if (error) throw error;      setUsers(users.map(u =>         u.id === selectedUser.id ? { ...u, is_banned: newBanStatus } : u      ));      setShowBanModal(false);      setSelectedUser(null);    } catch (error) {      console.error('Ban durumu güncellenirken hata:', error);      alert('Ban durumu güncellenirken hata oluştu');    } finally {      setProcessing(false);    }  };  const getRoleColor = (role: string) => {    switch (role) {      case 'admin': return 'bg-red-500/20 text-red-400 border-red-500/30';      case 'moderator': return 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30';      default: return 'bg-gray-500/20 text-gray-400 border-gray-500/30';    }  };  const getRoleText = (role: string) => {    switch (role) {      case 'admin': return 'Admin';      case 'moderator': return 'Moderatör';      default: return 'Kullanıcı';    }  };  const formatDate = (dateString: string) => {    const date = new Date(dateString);    return date.toLocaleDateString('tr-TR', {      year: 'numeric',      month: 'short',      day: 'numeric'    });  };  if (authLoading || loading) {    return (      <div className="bg-dark-900 min-h-screen flex items-center justify-center">        <div className="text-center">          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary-500 mx-auto mb-4"></div>          <p className="text-gray-400">Kullanıcılar yükleniyor...</p>        </div>      </div>    );  }  if (!user || (user.role !== 'admin' && user.role !== 'moderator')) {    return (      <div className="bg-dark-900 min-h-screen flex items-center justify-center">        <div className="text-center">          <p className="text-red-400 mb-4">Bu sayfaya erişim yetkiniz yok</p>          <Link href="/admin" className="text-primary-400 hover:text-primary-300">            Admin paneline dön          </Link>        </div>      </div>    );  }  return (    <div className="bg-dark-900 min-h-screen">      <div className="max-w-7xl mx-auto px-4 py-8">        <div className="flex items-center justify-between mb-8">          <div className="flex items-center gap-4">            <Link               href="/admin"              className="flex items-center gap-2 text-gray-400 hover:text-primary-400 transition-colors"            >              <FaArrowLeft />              <span>Admin Panel</span>            </Link>            <div className="w-px h-6 bg-gray-600"></div>            <div className="flex items-center gap-2">              <FaUsers className="text-primary-400" />              <h1 className="text-2xl font-bold text-white">Kullanıcı Yönetimi</h1>            </div>          </div>          <div className="text-sm text-gray-400">            {filteredUsers.length} / {users.length} kullanıcı          </div>        </div>        <div className="bg-dark-800 rounded-xl p-6 border border-dark-700 mb-6">          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">            <div className="relative">              <FaSearch className="absolute left-3 top-3 text-gray-400" />              <input                type="text"                placeholder="Kullanıcı ara..."                value={searchTerm}                onChange={(e) => setSearchTerm(e.target.value)}                className="w-full bg-dark-900 border border-dark-600 rounded-lg pl-10 pr-4 py-2 text-white placeholder-gray-400 focus:border-primary-500 focus:outline-none"              />            </div>            <select              value={roleFilter}              onChange={(e) => setRoleFilter(e.target.value)}              className="bg-dark-900 border border-dark-600 rounded-lg px-4 py-2 text-white focus:border-primary-500 focus:outline-none"            >              <option value="all">Tüm Roller</option>              <option value="admin">Admin</option>              <option value="moderator">Moderatör</option>              <option value="user">Kullanıcı</option>            </select>            <select              value={statusFilter}              onChange={(e) => setStatusFilter(e.target.value)}              className="bg-dark-900 border border-dark-600 rounded-lg px-4 py-2 text-white focus:border-primary-500 focus:outline-none"            >              <option value="all">Tüm Durumlar</option>              <option value="active">Aktif</option>              <option value="banned">Engelli</option>            </select>            <select              value={sortBy}              onChange={(e) => setSortBy(e.target.value)}              className="bg-dark-900 border border-dark-600 rounded-lg px-4 py-2 text-white focus:border-primary-500 focus:outline-none"            >              <option value="newest">En Yeni</option>              <option value="oldest">En Eski</option>              <option value="username">Kullanıcı Adı</option>              <option value="posts">Gönderi Sayısı</option>            </select>          </div>        </div>        <div className="bg-dark-800 rounded-xl border border-dark-700 overflow-hidden">          <div className="overflow-x-auto">            <table className="w-full">              <thead className="bg-dark-700">                <tr>                  <th className="px-6 py-4 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">                    Kullanıcı                  </th>                  <th className="px-6 py-4 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">                    Rol                  </th>                  <th className="px-6 py-4 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">                    Aktivite                  </th>                  <th className="px-6 py-4 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">                    Durum                  </th>                  <th className="px-6 py-4 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">                    Katılım                  </th>                  <th className="px-6 py-4 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">                    İşlemler                  </th>                </tr>              </thead>              <tbody className="divide-y divide-dark-700">                {filteredUsers.map((userData) => (                  <tr key={userData.id} className="hover:bg-dark-700/50 transition-colors">                    <td className="px-6 py-4">                      <div className="flex items-center gap-3">                        <div className="w-10 h-10 rounded-full overflow-hidden flex-shrink-0">                          <Image                            src={userData.avatar_url || `${DEFAULT_AVATAR_URL}${encodeURIComponent(userData.username)}`}                            alt={userData.username}                            width={40}                            height={40}                            className="object-cover w-full h-full"                          />                        </div>                        <div>                          <p className="font-medium text-white">{userData.username}</p>                          <p className="text-sm text-gray-400">{userData.email}</p>                        </div>                      </div>                    </td>                    <td className="px-6 py-4">                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium border ${getRoleColor(userData.role)}`}>                        {getRoleText(userData.role)}                      </span>                    </td>                    <td className="px-6 py-4 text-sm text-gray-400">                      <div>                        <p>{userData.total_threads} konu</p>                        <p>{userData.total_posts} gönderi</p>                      </div>                    </td>                    <td className="px-6 py-4">                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${                        userData.is_banned                           ? 'bg-red-500/20 text-red-400'                           : 'bg-green-500/20 text-green-400'                      }`}>                        {userData.is_banned ? 'Engelli' : 'Aktif'}                      </span>                    </td>                    <td className="px-6 py-4 text-sm text-gray-400">                      {formatDate(userData.created_at)}                    </td>                    <td className="px-6 py-4">                      <div className="flex items-center gap-2">                        {user.role === 'admin' && (                          <button                            onClick={() => {                              setSelectedUser(userData);                              setShowRoleModal(true);                            }}                            className="text-yellow-400 hover:text-yellow-300 transition-colors"                            title="Rol Değiştir"                          >                            <FaUserShield />                          </button>                        )}                        <button                          onClick={() => {                            setSelectedUser(userData);                            setShowBanModal(true);                          }}                          className={`transition-colors ${                            userData.is_banned                               ? 'text-green-400 hover:text-green-300'                               : 'text-red-400 hover:text-red-300'                          }`}                          title={userData.is_banned ? 'Engeli Kaldır' : 'Engelle'}                        >                          {userData.is_banned ? <FaUnlock /> : <FaBan />}                        </button>                      </div>                    </td>                  </tr>                ))}              </tbody>            </table>          </div>          {filteredUsers.length === 0 && (            <div className="text-center py-12">              <FaUsers className="mx-auto text-gray-600 text-4xl mb-4" />              <p className="text-gray-400">Kullanıcı bulunamadı</p>            </div>          )}        </div>      </div>      {showRoleModal && selectedUser && (        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">          <div className="bg-dark-800 rounded-xl p-6 border border-dark-700 max-w-md w-full mx-4">            <h3 className="text-xl font-bold text-white mb-4">Rol Değiştir</h3>            <p className="text-gray-400 mb-6">              <span className="font-medium text-white">{selectedUser.username}</span> kullanıcısının rolünü değiştirmek istediğinizden emin misiniz?            </p>            <div className="space-y-3 mb-6">              <button                onClick={() => handleRoleChange('user')}                disabled={processing}                className="w-full text-left p-3 rounded-lg bg-dark-700 hover:bg-dark-600 transition-colors disabled:opacity-50"              >                <span className="text-white">Kullanıcı</span>                <p className="text-sm text-gray-400">Standart kullanıcı yetkileri</p>              </button>              <button                onClick={() => handleRoleChange('moderator')}                disabled={processing}                className="w-full text-left p-3 rounded-lg bg-dark-700 hover:bg-dark-600 transition-colors disabled:opacity-50"              >                <span className="text-yellow-400">Moderatör</span>                <p className="text-sm text-gray-400">Konu ve gönderi yönetimi</p>              </button>              <button                onClick={() => handleRoleChange('admin')}                disabled={processing}                className="w-full text-left p-3 rounded-lg bg-dark-700 hover:bg-dark-600 transition-colors disabled:opacity-50"              >                <span className="text-red-400">Admin</span>                <p className="text-sm text-gray-400">Tam yönetici yetkileri</p>              </button>            </div>            <div className="flex gap-3">              <button                onClick={() => {                  setShowRoleModal(false);                  setSelectedUser(null);                }}                disabled={processing}                className="flex-1 px-4 py-2 bg-gray-600 hover:bg-gray-500 text-white rounded-lg transition-colors disabled:opacity-50"              >                İptal              </button>            </div>          </div>        </div>      )}      {showBanModal && selectedUser && (        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">          <div className="bg-dark-800 rounded-xl p-6 border border-dark-700 max-w-md w-full mx-4">            <h3 className="text-xl font-bold text-white mb-4">              {selectedUser.is_banned ? 'Engeli Kaldır' : 'Kullanıcıyı Engelle'}            </h3>            <p className="text-gray-400 mb-6">              <span className="font-medium text-white">{selectedUser.username}</span> kullanıcısını {selectedUser.is_banned ? 'engelini kaldırmak' : 'engellemek'} istediğinizden emin misiniz?            </p>            <div className="flex gap-3">              <button                onClick={() => {                  setShowBanModal(false);                  setSelectedUser(null);                }}                disabled={processing}                className="flex-1 px-4 py-2 bg-gray-600 hover:bg-gray-500 text-white rounded-lg transition-colors disabled:opacity-50"              >                İptal              </button>              <button                onClick={handleBanToggle}                disabled={processing}                className={`flex-1 px-4 py-2 text-white rounded-lg transition-colors disabled:opacity-50 ${                  selectedUser.is_banned                    ? 'bg-green-600 hover:bg-green-500'                    : 'bg-red-600 hover:bg-red-500'                }`}              >                {processing ? 'İşleniyor...' : (selectedUser.is_banned ? 'Engeli Kaldır' : 'Engelle')}              </button>            </div>          </div>        </div>      )}    </div>  );} 