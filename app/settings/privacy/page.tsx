'use client';import { useState, useEffect } from 'react';import { useRouter } from 'next/navigation';import Link from 'next/link';import {   FaArrowLeft,  FaEye,  FaHeart,  FaUserFriends,  FaEnvelope,  FaToggleOn,  FaToggleOff,  FaSave,  FaCheck,  FaShieldAlt} from 'react-icons/fa';import { supabase, validateToken } from '../../../lib/supabase';type PrivacySettings = {  show_likes: boolean;  show_followers: boolean;  show_following: boolean;  show_online_status: boolean;  show_profile_to_guests: boolean;  show_email: boolean;};export default function PrivacySettingsPage() {  const router = useRouter();  const [currentUser, setCurrentUser] = useState<any>(null);  const [loading, setLoading] = useState(true);  const [saving, setSaving] = useState(false);  const [saveSuccess, setSaveSuccess] = useState(false);  const [privacySettings, setPrivacySettings] = useState<PrivacySettings>({    show_likes: true,    show_followers: true,    show_following: true,    show_online_status: true,    show_profile_to_guests: true,    show_email: false  });  const getCurrentUser = async () => {    try {      const token = localStorage.getItem('auth_token');      if (!token) {        router.push('/auth/login');        return;      }      const { user, error } = await validateToken(token);      if (error || !user) {        router.push('/auth/login');        return;      }      setCurrentUser(user);      await loadUserSettings(user.id);    } catch (error) {      console.error('Error getting current user:', error);      router.push('/auth/login');    } finally {      setLoading(false);    }  };  const loadUserSettings = async (userId: number) => {    try {      const { data: settings, error } = await supabase        .from('user_settings')        .select('*')        .eq('user_id', userId)        .single();      if (error && error.code === 'PGRST116') {        const defaultSettings = {          user_id: userId,          show_likes: true,          show_followers: true,          show_following: true,          show_online_status: true,          show_profile_to_guests: true,          allow_messages: true,          email_notifications: true,          like_notifications: true,          comment_notifications: true,          follow_notifications: true,          thread_notifications: true,          mobile_notifications: false        };        const { error: insertError } = await supabase          .from('user_settings')          .insert(defaultSettings);        if (!insertError) {          setPrivacySettings({            show_likes: defaultSettings.show_likes,            show_followers: defaultSettings.show_followers,            show_following: defaultSettings.show_following,            show_online_status: defaultSettings.show_online_status,            show_profile_to_guests: defaultSettings.show_profile_to_guests,            show_email: false          });        }      } else if (!error && settings) {        setPrivacySettings({          show_likes: settings.show_likes,          show_followers: settings.show_followers,          show_following: settings.show_following,          show_online_status: settings.show_online_status,          show_profile_to_guests: settings.show_profile_to_guests,          show_email: settings.show_email ?? false        });      }    } catch (error) {      console.error('Error loading user settings:', error);    }  };  const saveSettings = async () => {    if (!currentUser) {      console.log('No current user found');      return;    }    try {      setSaving(true);      const settingsData = {        user_id: currentUser.id,        show_likes: privacySettings.show_likes,        show_followers: privacySettings.show_followers,        show_following: privacySettings.show_following,        show_online_status: privacySettings.show_online_status,        show_profile_to_guests: privacySettings.show_profile_to_guests,        show_email: privacySettings.show_email,        updated_at: new Date().toISOString()      };      const { data: existingSettings } = await supabase        .from('user_settings')        .select('user_id')        .eq('user_id', currentUser.id)        .single();      let result;      if (existingSettings) {        result = await supabase          .from('user_settings')          .update(settingsData)          .eq('user_id', currentUser.id);      } else {        result = await supabase          .from('user_settings')          .insert(settingsData);      }      if (result.error) {        console.error('Error saving settings:', result.error);        alert(`Ayarlar kaydedilemedi: ${result.error.message}`);        return;      }      setSaveSuccess(true);      setTimeout(() => setSaveSuccess(false), 3000);    } catch (error) {      console.error('Error saving settings:', error);    } finally {      setSaving(false);    }  };  const togglePrivacySetting = (key: keyof PrivacySettings) => {    setPrivacySettings(prev => ({      ...prev,      [key]: !prev[key]    }));  };  useEffect(() => {    getCurrentUser();  }, []);  if (loading) {    return (      <div className="bg-gradient-to-b from-dark-900 to-dark-800 min-h-screen">        <div className="container mx-auto px-4 py-8">          <div className="flex justify-center py-12">            <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary-500"></div>          </div>        </div>      </div>    );  }  if (!currentUser) {    return null;  }  const ToggleSwitch = ({ isOn, onToggle, disabled = false }: { isOn: boolean; onToggle: () => void; disabled?: boolean }) => (    <button      onClick={onToggle}      disabled={disabled}      className={`p-1 rounded-full transition-colors ${disabled ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}`}    >      {isOn ? (        <FaToggleOn className="text-3xl text-primary-500" />      ) : (        <FaToggleOff className="text-3xl text-gray-400" />      )}    </button>  );  return (    <div className="bg-gradient-to-b from-dark-900 to-dark-800 min-h-screen">      <div className="container mx-auto px-4 py-8">        <div className="mb-6">          <Link            href="/settings"            className="inline-flex items-center gap-2 text-gray-300 hover:text-white transition-colors mb-4"          >            <FaArrowLeft />            Ayarlara Dön          </Link>          <h1 className="text-3xl font-bold text-white">Gizlilik Ayarları</h1>          <p className="text-gray-400 mt-2">Profilinizin görünürlüğünü ve gizliliğinizi yönetin</p>        </div>        <div className="max-w-4xl mx-auto">          <div className="bg-dark-700 rounded-xl border border-dark-600 p-6">            <div className="space-y-6">              <div className="flex items-center gap-3 mb-6">                <FaShieldAlt className="text-primary-500 text-xl" />                <h2 className="text-xl font-semibold text-white">Gizlilik Tercihleri</h2>              </div>              <div className="space-y-4">                <h3 className="text-lg font-medium text-white mb-4">Profil Görünürlüğü</h3>                <div className="flex items-center justify-between p-4 bg-dark-600 rounded-lg">                  <div className="flex items-center gap-3">                    <FaEye className="text-primary-500" />                    <div>                      <p className="text-white font-medium">Profili misafirlere göster</p>                      <p className="text-sm text-gray-400">Giriş yapmamış kullanıcılar profilinizi görebilir</p>                    </div>                  </div>                  <ToggleSwitch                    isOn={privacySettings.show_profile_to_guests}                    onToggle={() => togglePrivacySetting('show_profile_to_guests')}                  />                </div>                <div className="flex items-center justify-between p-4 bg-dark-600 rounded-lg">                  <div className="flex items-center gap-3">                    <FaHeart className="text-red-500" />                    <div>                      <p className="text-white font-medium">Beğenileri göster</p>                      <p className="text-sm text-gray-400">Diğer kullanıcılar beğendiğiniz gönderileri görebilir</p>                    </div>                  </div>                  <ToggleSwitch                    isOn={privacySettings.show_likes}                    onToggle={() => togglePrivacySetting('show_likes')}                  />                </div>                <div className="flex items-center justify-between p-4 bg-dark-600 rounded-lg">                  <div className="flex items-center gap-3">                    <FaUserFriends className="text-blue-500" />                    <div>                      <p className="text-white font-medium">Takipçi listesini göster</p>                      <p className="text-sm text-gray-400">Diğer kullanıcılar takipçi listenizi görüntüleyebilir</p>                    </div>                  </div>                  <ToggleSwitch                    isOn={privacySettings.show_followers}                    onToggle={() => togglePrivacySetting('show_followers')}                  />                </div>                <div className="flex items-center justify-between p-4 bg-dark-600 rounded-lg">                  <div className="flex items-center gap-3">                    <FaUserFriends className="text-green-500" />                    <div>                      <p className="text-white font-medium">Takip ettikleri listesini göster</p>                      <p className="text-sm text-gray-400">Diğer kullanıcılar takip ettiklerinizi görüntüleyebilir</p>                    </div>                  </div>                  <ToggleSwitch                    isOn={privacySettings.show_following}                    onToggle={() => togglePrivacySetting('show_following')}                  />                </div>              </div>              <div className="pt-6 border-t border-dark-600">                <button                  onClick={saveSettings}                  disabled={saving}                  className={`w-full px-6 py-3 rounded-lg font-medium transition-all flex items-center justify-center gap-2 ${                    saveSuccess                      ? 'bg-green-600 text-white'                      : saving                      ? 'bg-primary-400 text-white cursor-not-allowed'                      : 'bg-primary-600 hover:bg-primary-700 text-white'                  }`}                >                  {saving ? (                    <>                      <div className="animate-spin rounded-full h-4 w-4 border-t-2 border-b-2 border-white"></div>                      Kaydediliyor...                    </>                  ) : saveSuccess ? (                    <>                      <FaCheck />                      Kaydedildi!                    </>                  ) : (                    <>                      <FaSave />                      Değişiklikleri Kaydet                    </>                  )}                </button>              </div>            </div>          </div>        </div>      </div>    </div>  );} 