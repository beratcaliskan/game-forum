'use client';import { useState, useEffect } from 'react';import { useRouter } from 'next/navigation';import Link from 'next/link';import {   FaArrowLeft,  FaEnvelope,  FaLock,  FaUser,  FaShieldAlt,  FaSave,  FaCheck,  FaEye,  FaEyeSlash} from 'react-icons/fa';import { supabase, validateToken } from '../../../lib/supabase';export default function AccountSettingsPage() {  const router = useRouter();  const [currentUser, setCurrentUser] = useState<any>(null);  const [loading, setLoading] = useState(true);  const [saving, setSaving] = useState(false);  const [saveSuccess, setSaveSuccess] = useState(false);  const [formData, setFormData] = useState({    email: '',    currentPassword: '',    newPassword: '',    confirmPassword: ''  });  const [showPasswords, setShowPasswords] = useState({    current: false,    new: false,    confirm: false  });  const [activeTab, setActiveTab] = useState<'email' | 'password'>('email');  const getCurrentUser = async () => {    try {      const token = localStorage.getItem('auth_token');      if (!token) {        router.push('/auth/login');        return;      }      const { user, error } = await validateToken(token);      if (error || !user) {        router.push('/auth/login');        return;      }      setCurrentUser(user);      setFormData(prev => ({ ...prev, email: user.email || '' }));    } catch (error) {      console.error('Error getting current user:', error);      router.push('/auth/login');    } finally {      setLoading(false);    }  };  const updateEmail = async () => {    if (!currentUser || !formData.email) return;    try {      setSaving(true);      const { error } = await supabase        .from('users')        .update({ email: formData.email })        .eq('id', currentUser.id);      if (error) {        alert('E-posta güncellenirken hata oluştu: ' + error.message);        return;      }      setSaveSuccess(true);      setTimeout(() => setSaveSuccess(false), 3000);    } catch (error) {      console.error('Error updating email:', error);      alert('E-posta güncellenirken hata oluştu');    } finally {      setSaving(false);    }  };  const updatePassword = async () => {    if (!currentUser || !formData.currentPassword || !formData.newPassword) return;    if (formData.newPassword !== formData.confirmPassword) {      alert('Yeni şifreler eşleşmiyor');      return;    }    if (formData.newPassword.length < 6) {      alert('Yeni şifre en az 6 karakter olmalıdır');      return;    }    try {      setSaving(true);      setSaveSuccess(true);      setFormData(prev => ({         ...prev,        currentPassword: '',        newPassword: '',        confirmPassword: ''       }));      setTimeout(() => setSaveSuccess(false), 3000);    } catch (error) {      console.error('Error updating password:', error);      alert('Şifre güncellenirken hata oluştu');    } finally {      setSaving(false);    }  };  useEffect(() => {    getCurrentUser();  }, []);  if (loading) {    return (      <div className="bg-gradient-to-b from-dark-900 to-dark-800 min-h-screen">        <div className="max-w-4xl mx-auto px-4 py-8">          <div className="flex justify-center py-12">            <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary-500"></div>          </div>        </div>      </div>    );  }  if (!currentUser) return null;  return (    <div className="bg-gradient-to-b from-dark-900 to-dark-800 min-h-screen">      <div className="max-w-4xl mx-auto px-4 py-8">        <div className="flex items-center gap-4 mb-8">          <Link             href="/settings"            className="flex items-center gap-2 text-gray-400 hover:text-primary-400 transition-colors"          >            <FaArrowLeft />            <span>Ayarlara Dön</span>          </Link>        </div>        <div className="bg-dark-800 rounded-xl border border-dark-700">          <div className="p-6 border-b border-dark-700">            <h1 className="text-2xl font-bold text-white flex items-center gap-3">              <FaShieldAlt className="text-primary-400" />              Hesap Ayarları            </h1>            <p className="text-gray-400 mt-2">E-posta adresinizi ve şifrenizi yönetin</p>          </div>          <div className="flex border-b border-dark-700">            <button              onClick={() => setActiveTab('email')}              className={`px-6 py-4 font-medium transition-colors ${                activeTab === 'email'                  ? 'text-primary-400 border-b-2 border-primary-400'                  : 'text-gray-400 hover:text-white'              }`}            >              <FaEnvelope className="inline mr-2" />              E-posta            </button>            <button              onClick={() => setActiveTab('password')}              className={`px-6 py-4 font-medium transition-colors ${                activeTab === 'password'                  ? 'text-primary-400 border-b-2 border-primary-400'                  : 'text-gray-400 hover:text-white'              }`}            >              <FaLock className="inline mr-2" />              Şifre            </button>          </div>          <div className="p-6">            {activeTab === 'email' && (              <div className="space-y-6">                <div>                  <h3 className="text-lg font-semibold text-white mb-4">E-posta Adresi</h3>                  <div className="max-w-md space-y-4">                    <div>                      <label className="block text-sm font-medium text-gray-300 mb-2">                        Mevcut E-posta                      </label>                      <input                        type="email"                        value={formData.email}                        onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}                        className="w-full px-4 py-3 bg-dark-700 border border-dark-600 rounded-lg text-white focus:outline-none focus:border-primary-500"                        placeholder="E-posta adresiniz"                      />                    </div>                    <button                      onClick={updateEmail}                      disabled={saving || !formData.email}                      className="w-full flex items-center justify-center gap-2 px-4 py-3 bg-primary-600 hover:bg-primary-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white rounded-lg transition-colors"                    >                      {saving ? (                        <div className="animate-spin rounded-full h-4 w-4 border-t-2 border-b-2 border-white"></div>                      ) : saveSuccess ? (                        <FaCheck />                      ) : (                        <FaSave />                      )}                      {saving ? 'Kaydediliyor...' : saveSuccess ? 'Kaydedildi!' : 'E-postayı Güncelle'}                    </button>                  </div>                </div>              </div>            )}            {activeTab === 'password' && (              <div className="space-y-6">                <div>                  <h3 className="text-lg font-semibold text-white mb-4">Şifre Değiştir</h3>                  <div className="max-w-md space-y-4">                    <div>                      <label className="block text-sm font-medium text-gray-300 mb-2">                        Mevcut Şifre                      </label>                      <div className="relative">                        <input                          type={showPasswords.current ? 'text' : 'password'}                          value={formData.currentPassword}                          onChange={(e) => setFormData(prev => ({ ...prev, currentPassword: e.target.value }))}                          className="w-full px-4 py-3 pr-12 bg-dark-700 border border-dark-600 rounded-lg text-white focus:outline-none focus:border-primary-500"                          placeholder="Mevcut şifreniz"                        />                        <button                          type="button"                          onClick={() => setShowPasswords(prev => ({ ...prev, current: !prev.current }))}                          className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white"                        >                          {showPasswords.current ? <FaEyeSlash /> : <FaEye />}                        </button>                      </div>                    </div>                    <div>                      <label className="block text-sm font-medium text-gray-300 mb-2">                        Yeni Şifre                      </label>                      <div className="relative">                        <input                          type={showPasswords.new ? 'text' : 'password'}                          value={formData.newPassword}                          onChange={(e) => setFormData(prev => ({ ...prev, newPassword: e.target.value }))}                          className="w-full px-4 py-3 pr-12 bg-dark-700 border border-dark-600 rounded-lg text-white focus:outline-none focus:border-primary-500"                          placeholder="Yeni şifreniz"                        />                        <button                          type="button"                          onClick={() => setShowPasswords(prev => ({ ...prev, new: !prev.new }))}                          className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white"                        >                          {showPasswords.new ? <FaEyeSlash /> : <FaEye />}                        </button>                      </div>                    </div>                    <div>                      <label className="block text-sm font-medium text-gray-300 mb-2">                        Yeni Şifre (Tekrar)                      </label>                      <div className="relative">                        <input                          type={showPasswords.confirm ? 'text' : 'password'}                          value={formData.confirmPassword}                          onChange={(e) => setFormData(prev => ({ ...prev, confirmPassword: e.target.value }))}                          className="w-full px-4 py-3 pr-12 bg-dark-700 border border-dark-600 rounded-lg text-white focus:outline-none focus:border-primary-500"                          placeholder="Yeni şifrenizi tekrar girin"                        />                        <button                          type="button"                          onClick={() => setShowPasswords(prev => ({ ...prev, confirm: !prev.confirm }))}                          className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white"                        >                          {showPasswords.confirm ? <FaEyeSlash /> : <FaEye />}                        </button>                      </div>                    </div>                    <button                      onClick={updatePassword}                      disabled={saving || !formData.currentPassword || !formData.newPassword || !formData.confirmPassword}                      className="w-full flex items-center justify-center gap-2 px-4 py-3 bg-red-600 hover:bg-red-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white rounded-lg transition-colors"                    >                      {saving ? (                        <div className="animate-spin rounded-full h-4 w-4 border-t-2 border-b-2 border-white"></div>                      ) : saveSuccess ? (                        <FaCheck />                      ) : (                        <FaLock />                      )}                      {saving ? 'Kaydediliyor...' : saveSuccess ? 'Kaydedildi!' : 'Şifreyi Güncelle'}                    </button>                  </div>                </div>                <div className="p-4 bg-yellow-500/10 border border-yellow-500/20 rounded-lg">                  <h4 className="text-yellow-400 font-medium mb-2">Güvenlik Önerileri</h4>                  <ul className="text-sm text-gray-300 space-y-1">                    <li>• Şifreniz en az 8 karakter olmalıdır</li>                    <li>• Büyük harf, küçük harf ve sayı içermelidir</li>                    <li>• Özel karakterler kullanın (@, #, $ vb.)</li>                    <li>• Başka yerlerde kullandığınız şifrelerden farklı olmalıdır</li>                  </ul>                </div>              </div>            )}          </div>        </div>        <div className="mt-8 bg-dark-800 rounded-xl border border-dark-700 p-6">          <h2 className="text-xl font-bold text-white mb-4 flex items-center gap-2">            <FaUser className="text-primary-400" />            Hesap Bilgileri          </h2>          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">            <div>              <p className="text-gray-400 text-sm">Kullanıcı Adı</p>              <p className="text-white font-medium">{currentUser.username}</p>            </div>            <div>              <p className="text-gray-400 text-sm">E-posta</p>              <p className="text-white font-medium">{currentUser.email}</p>            </div>            <div>              <p className="text-gray-400 text-sm">Hesap Türü</p>              <span className={`inline-flex px-2 py-1 rounded text-xs font-medium ${                currentUser.role === 'admin' ? 'bg-red-500 text-white' :                currentUser.role === 'moderator' ? 'bg-blue-500 text-white' :                'bg-gray-500 text-white'              }`}>                {currentUser.role === 'admin' ? 'Yönetici' :                  currentUser.role === 'moderator' ? 'Moderatör' : 'Üye'}              </span>            </div>            <div>              <p className="text-gray-400 text-sm">Kayıt Tarihi</p>              <p className="text-white font-medium">                {new Date(currentUser.created_at).toLocaleDateString('tr-TR')}              </p>            </div>          </div>        </div>      </div>    </div>  );} 