'use client';import { useState } from 'react';import { FaTimes, FaExclamationTriangle } from 'react-icons/fa';import { submitReport, checkExistingReport, ReportData, ReportType, ReportReason } from '../lib/supabase';import { useAuth } from '../lib/AuthContext';type ReportModalProps = {  isOpen: boolean;  onClose: () => void;  reportType: ReportType;  targetId?: number;  targetTitle?: string;};const reasonLabels: Record<ReportReason, string> = {  spam: 'Spam / Reklam',  harassment: 'Taciz / Zorbalık',  inappropriate_content: 'Uygunsuz İçerik',  hate_speech: 'Nefret Söylemi',  misinformation: 'Yanlış Bilgi',  copyright_violation: 'Telif Hakkı İhlali',  other: 'Diğer'};const typeLabels: Record<ReportType, string> = {  thread: 'Konu',  post: 'Mesaj',  profile: 'Profil'};export default function ReportModal({ isOpen, onClose, reportType, targetId, targetTitle }: ReportModalProps) {  const [reason, setReason] = useState<ReportReason>('spam');  const [description, setDescription] = useState('');  const [loading, setLoading] = useState(false);  const [error, setError] = useState<string | null>(null);  const [success, setSuccess] = useState(false);  const { user } = useAuth();  const handleSubmit = async (e: React.FormEvent) => {    e.preventDefault();    if (!user) {      setError('Şikayet göndermek için giriş yapmalısınız');      return;    }    if (!targetId) {      setError('Şikayet hedefi bulunamadı');      return;    }    setLoading(true);    setError(null);    try {      const reportData: ReportData = {        reportType,        reason,        description: description.trim() || undefined      };      if (reportType === 'thread') {        reportData.threadId = targetId;      } else if (reportType === 'post') {        reportData.postId = targetId;      } else if (reportType === 'profile') {        reportData.reportedUserId = targetId;      }      const { exists, error: checkError } = await checkExistingReport(reportData, user.id);      if (checkError) {        throw new Error(checkError);      }      if (exists) {        setError('Bu içeriği daha önce şikayet etmişsiniz');        return;      }      const { error: submitError } = await submitReport(reportData, user.id);      if (submitError) {        throw new Error(submitError);      }      setSuccess(true);      setTimeout(() => {        onClose();        resetForm();      }, 2000);    } catch (error: any) {      setError(error.message || 'Şikayet gönderilirken bir hata oluştu');    } finally {      setLoading(false);    }  };  const resetForm = () => {    setReason('spam');    setDescription('');    setError(null);    setSuccess(false);    setLoading(false);  };  const handleClose = () => {    onClose();    resetForm();  };  if (!isOpen) return null;  return (    <div       className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4"      onClick={handleClose}    >      <div         className="bg-dark-800 rounded-xl max-w-md w-full max-h-[90vh] overflow-y-auto"        onClick={(e) => e.stopPropagation()}      >        <div className="flex items-center justify-between p-6 border-b border-dark-600">          <div className="flex items-center gap-3">            <FaExclamationTriangle className="text-red-500" />            <h2 className="text-xl font-bold text-white">              {typeLabels[reportType]} Şikayet Et            </h2>          </div>          <button            onClick={handleClose}            className="text-gray-400 hover:text-white transition-colors"          >            <FaTimes />          </button>        </div>        <div className="p-6">          {success ? (            <div className="text-center py-8">              <div className="text-green-500 text-5xl mb-4">✓</div>              <h3 className="text-lg font-semibold text-white mb-2">                Şikayetiniz Alındı              </h3>              <p className="text-gray-400">                Şikayetiniz moderatörler tarafından incelenecektir.              </p>            </div>          ) : (            <>              <div className="mb-6 p-4 bg-dark-700 rounded-lg">                <h3 className="text-sm font-medium text-gray-300 mb-2">                  Şikayet Edilen {typeLabels[reportType]}:                </h3>                <p className="text-white text-sm break-words">                  {targetTitle || `${typeLabels[reportType]} #${targetId}`}                </p>              </div>              <form onSubmit={handleSubmit} className="space-y-6">                <div>                  <label className="block text-sm font-medium text-gray-300 mb-3">                    Şikayet Sebebi *                  </label>                  <div className="space-y-2">                    {Object.entries(reasonLabels).map(([value, label]) => (                      <label key={value} className="flex items-center gap-3 cursor-pointer">                        <input                          type="radio"                          name="reason"                          value={value}                          checked={reason === value}                          onChange={(e) => setReason(e.target.value as ReportReason)}                          className="text-primary-500 focus:ring-primary-500"                        />                        <span className="text-gray-300">{label}</span>                      </label>                    ))}                  </div>                </div>                <div>                  <label className="block text-sm font-medium text-gray-300 mb-2">                    Açıklama (Opsiyonel)                  </label>                  <textarea                    value={description}                    onChange={(e) => setDescription(e.target.value)}                    placeholder="Şikayetinizle ilgili ek bilgi verebilirsiniz..."                    rows={4}                    maxLength={500}                    className="w-full p-3 bg-dark-600 border border-dark-500 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-500 resize-none"                  />                  <div className="text-xs text-gray-500 mt-1">                    {description.length}/500 karakter                  </div>                </div>                {error && (                  <div className="bg-red-500/20 border border-red-500 text-red-300 px-4 py-3 rounded-lg">                    {error}                  </div>                )}                <div className="flex gap-3 pt-4">                  <button                    type="button"                    onClick={handleClose}                    className="flex-1 px-4 py-3 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition-colors"                    disabled={loading}                  >                    İptal                  </button>                  <button                    type="submit"                    disabled={loading}                    className="flex-1 px-4 py-3 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed"                  >                    {loading ? 'Gönderiliyor...' : 'Şikayet Et'}                  </button>                </div>              </form>            </>          )}        </div>      </div>    </div>  );} 