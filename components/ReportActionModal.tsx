'use client';import { useState } from 'react';import { FaTimes, FaCheck, FaSpinner, FaBan } from 'react-icons/fa';type ReportActionModalProps = {  isOpen: boolean;  onClose: () => void;  onSubmit: (notes: string) => void;  reportData: {    id: number;    reason: string;    reporter: string;    type: string;  };  action: 'resolve' | 'dismiss';  loading: boolean;};export default function ReportActionModal({   isOpen,  onClose,  onSubmit,  reportData,  action,  loading }: ReportActionModalProps) {  const [moderatorNotes, setModeratorNotes] = useState('');  const handleSubmit = (e: React.FormEvent) => {    e.preventDefault();    onSubmit(moderatorNotes);  };  const handleClose = () => {    setModeratorNotes('');    onClose();  };  const getActionConfig = () => {    if (action === 'resolve') {      return {        title: 'Raporu Çöz',        icon: <FaCheck />,        buttonText: 'Raporu Çöz',        buttonClass: 'bg-green-600 hover:bg-green-700',        loadingText: 'Çözülüyor...',        notesLabel: 'Moderatör Notları',        notesPlaceholder: 'Bu raporla ilgili notlarınızı yazın...',        notesHint: 'İsteğe bağlı - Bu notlar sadece moderatörler tarafından görülebilir'      };    } else {      return {        title: 'Raporu Reddet',        icon: <FaBan />,        buttonText: 'Raporu Reddet',        buttonClass: 'bg-red-600 hover:bg-red-700',        loadingText: 'Reddediliyor...',        notesLabel: 'Red Nedeni',        notesPlaceholder: 'Bu raporu neden reddettiğinizi açıklayın...',        notesHint: 'İsteğe bağlı - Red nedeni diğer moderatörler tarafından görülebilir'      };    }  };  const config = getActionConfig();  if (!isOpen) return null;  return (    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">      <div className="bg-dark-700 rounded-xl p-6 w-full max-w-md border border-dark-600">        <div className="flex items-center justify-between mb-6">          <h2 className="text-xl font-bold text-white">{config.title}</h2>          <button            onClick={handleClose}            disabled={loading}            className="text-gray-400 hover:text-white transition-colors disabled:opacity-50"          >            <FaTimes size={20} />          </button>        </div>        <div className="bg-dark-800 rounded-lg p-4 mb-6">          <div className="space-y-2 text-sm">            <div>              <span className="text-gray-400">Rapor ID:</span>              <span className="text-white ml-2">#{reportData.id}</span>            </div>            <div>              <span className="text-gray-400">Tür:</span>              <span className="text-white ml-2 capitalize">{reportData.type}</span>            </div>            <div>              <span className="text-gray-400">Sebep:</span>              <span className="text-white ml-2">{reportData.reason}</span>            </div>            <div>              <span className="text-gray-400">Raporlayan:</span>              <span className="text-white ml-2">{reportData.reporter}</span>            </div>          </div>        </div>        <form onSubmit={handleSubmit}>          <div className="mb-6">            <label className="block text-sm font-medium text-gray-300 mb-2">              {config.notesLabel}            </label>            <textarea              value={moderatorNotes}              onChange={(e) => setModeratorNotes(e.target.value)}              placeholder={config.notesPlaceholder}              className="w-full px-3 py-2 bg-dark-800 border border-dark-600 rounded-lg text-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent resize-none"              rows={4}              disabled={loading}            />            <p className="text-xs text-gray-500 mt-1">              {config.notesHint}            </p>          </div>          <div className="flex gap-3">            <button              type="button"              onClick={handleClose}              disabled={loading}              className="flex-1 px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed"            >              İptal            </button>            <button              type="submit"              disabled={loading}              className={`flex-1 px-4 py-2 ${config.buttonClass} text-white rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2`}            >              {loading ? (                <>                  <FaSpinner className="animate-spin" />                  {config.loadingText}                </>              ) : (                <>                  {config.icon}                  {config.buttonText}                </>              )}            </button>          </div>        </form>      </div>    </div>  );} 