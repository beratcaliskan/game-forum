'use client';import { useState, useEffect } from 'react';import Link from 'next/link';import { FaUser, FaTimes, FaUserPlus, FaSearch } from 'react-icons/fa';import { getFollowersList, getFollowingList, followUser, unfollowUser, checkFollowStatus, validateToken } from '../lib/supabase';type User = {  id: number;  username: string;  display_name: string;  avatar_url: string;};type FollowModalProps = {  isOpen: boolean;  onClose: () => void;  userId: number;  type: 'followers' | 'following';  title: string;};export default function FollowModal({ isOpen, onClose, userId, type, title }: FollowModalProps) {  const [users, setUsers] = useState<User[]>([]);  const [filteredUsers, setFilteredUsers] = useState<User[]>([]);  const [loading, setLoading] = useState(true);  const [followStates, setFollowStates] = useState<Record<number, boolean>>({});  const [followLoading, setFollowLoading] = useState<Record<number, boolean>>({});  const [currentUser, setCurrentUser] = useState<any>(null);  const [searchQuery, setSearchQuery] = useState('');  const getCurrentUser = async () => {    try {      const token = localStorage.getItem('auth_token');      if (!token) return;      const { user, error } = await validateToken(token);      if (!error && user) {        setCurrentUser(user);      }    } catch (error) {      console.error('Current user fetch error:', error);    }  };  const fetchUsers = async () => {    if (!isOpen || !userId) return;    setLoading(true);    try {      if (type === 'followers') {        const result = await getFollowersList(userId);        if (!result.error) {          setUsers(result.followers);          setFilteredUsers(result.followers);        }      } else {        const result = await getFollowingList(userId);        if (!result.error) {          setUsers(result.following);          setFilteredUsers(result.following);        }      }    } catch (error) {      console.error('Liste yüklenirken hata:', error);    } finally {      setLoading(false);    }  };  const checkFollowStates = async () => {    if (!currentUser || users.length === 0) return;    const states: Record<number, boolean> = {};    for (const user of users) {      if (user.id !== currentUser.id) {        const result = await checkFollowStatus(currentUser.id, user.id);        if (!result.error) {          states[user.id] = result.isFollowing;        }      }    }    setFollowStates(states);  };  const handleFollow = async (targetUserId: number) => {    if (!currentUser || followLoading[targetUserId]) return;    setFollowLoading(prev => ({ ...prev, [targetUserId]: true }));    try {      const isCurrentlyFollowing = followStates[targetUserId];      if (isCurrentlyFollowing) {        const result = await unfollowUser(currentUser.id, targetUserId);        if (!result.error) {          setFollowStates(prev => ({ ...prev, [targetUserId]: false }));        }      } else {        const result = await followUser(currentUser.id, targetUserId);        if (!result.error) {          setFollowStates(prev => ({ ...prev, [targetUserId]: true }));        }      }    } catch (error) {      console.error('Takip işlemi hatası:', error);    } finally {      setFollowLoading(prev => ({ ...prev, [targetUserId]: false }));    }  };  const handleSearch = (query: string) => {    setSearchQuery(query);    if (!query.trim()) {      setFilteredUsers(users);    } else {      const filtered = users.filter(user =>         user.display_name.toLowerCase().includes(query.toLowerCase()) ||        user.username.toLowerCase().includes(query.toLowerCase())      );      setFilteredUsers(filtered);    }  };  useEffect(() => {    if (isOpen) {      getCurrentUser();      fetchUsers();      setSearchQuery('');    }  }, [isOpen, userId, type]);  useEffect(() => {    if (users.length > 0 && currentUser) {      checkFollowStates();    }  }, [users, currentUser]);  if (!isOpen) return null;  return (    <div       className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4"      onClick={onClose}    >      <div         className="bg-dark-700 rounded-xl max-w-md w-full max-h-[600px] border border-dark-600"        onClick={(e) => e.stopPropagation()}      >        <div className="flex items-center justify-between p-4 border-b border-dark-600">          <h2 className="text-lg font-semibold text-white">{title}</h2>          <button            onClick={onClose}            className="text-gray-400 hover:text-white transition-colors"          >            <FaTimes />          </button>        </div>        <div className="p-4">          {loading ? (            <div className="flex justify-center py-8">              <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-primary-500"></div>            </div>          ) : users.length === 0 ? (            <div className="text-center py-8">              <p className="text-gray-400">                {type === 'followers' ? 'Henüz takipçisi yok.' : 'Henüz kimseyi takip etmiyor.'}              </p>            </div>          ) : (            <>              <div className="mb-4">                <div className="relative">                  <FaSearch className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 text-sm" />                  <input                    type="text"                    placeholder="Kullanıcı ara..."                    value={searchQuery}                    onChange={(e) => handleSearch(e.target.value)}                    className="w-full bg-dark-600 border border-dark-500 rounded-lg pl-10 pr-4 py-2 text-white placeholder-gray-400 focus:outline-none focus:border-primary-500 focus:ring-1 focus:ring-primary-500 transition-colors"                  />                </div>              </div>              <div className="space-y-3 max-h-[350px] overflow-y-auto scrollbar-thin scrollbar-track-dark-600 scrollbar-thumb-dark-400 hover:scrollbar-thumb-dark-300">                {filteredUsers.length === 0 ? (                  <div className="text-center py-8">                    <p className="text-gray-400">Arama sonucu bulunamadı.</p>                  </div>                ) : (                  filteredUsers.map((user) => (                <div key={user.id} className="flex items-center justify-between p-3 rounded-lg">                  <Link                    href={`/profile/${user.username}`}                    onClick={onClose}                    className="flex items-center gap-3 flex-1 hover:text-primary-400 transition-colors"                  >                    <div className="w-10 h-10 rounded-full overflow-hidden bg-primary-500/20 flex-shrink-0">                      {user.avatar_url ? (                        <img                          src={user.avatar_url}                          alt={user.username}                          className="w-full h-full object-cover"                        />                      ) : (                        <div className="w-full h-full flex items-center justify-center text-primary-400">                          <FaUser size={16} />                        </div>                      )}                    </div>                    <div className="flex-1 min-w-0">                      <div className="font-medium text-white truncate">{user.display_name}</div>                      <div className="text-sm text-gray-400 truncate">@{user.username}</div>                    </div>                  </Link>                  {currentUser && currentUser.id !== user.id && (                    <button                      onClick={() => handleFollow(user.id)}                      disabled={followLoading[user.id]}                      className={`px-3 py-1.5 rounded-lg text-sm transition-colors flex items-center gap-1 ${                        followStates[user.id]                          ? 'bg-gray-600 hover:bg-gray-700 text-white'                          : 'bg-primary-600 hover:bg-primary-700 text-white'                      } ${followLoading[user.id] ? 'opacity-50 cursor-not-allowed' : ''}`}                    >                      <FaUserPlus size={12} />                      <span>                        {followLoading[user.id]                           ? '...'                           : followStates[user.id]                             ? 'Takipte'                             : 'Takip Et'                        }                      </span>                                         </button>                   )}                 </div>                   ))                 )}               </div>             </>           )}         </div>       </div>     </div>   ); } 